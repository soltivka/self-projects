{"version":3,"sources":["logo.svg","components/Resources/question.png","components/Home/Home.js","components/QuestionCard/QuestionCard.js","components/Button/Button.js","components/CategoryItem/CategoryItem.js","components/Game/Game.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","questions","className","src","logo","alt","to","Button","state","this","setState","vision","props","color","onClick","click","id","name","console","log","React","Component","CategoryItem","img_URL","text","currentQuestion","QuestionCard","difficultyChoosen","difficultyID","question","correctAnswer","answer","buttons","gameOver","chooseDifficulty","a","difficultyColor","difficultyText","getQuestions","choosenCategoryID","category","difficulty","questionsAmount","difficultyName","toLowerCase","questionsAmount_URL","fetch","questionsAmount_response","json","questionsAmount_json","maxQuestionsAmount","category_question_count","questions_URL","allQuestions_response","allQuestions_json","results","setQuestion","correct_answer","incorrectAnswers","incorrect_answers","setButtons","i","length","button","key","checkAnswer","push","sort","Math","random","setTimeout","categoryName","cards","alreadyMount","getImage","searchTerm","split","join","replace","images_URL","response","ok","obj_images","alert","status","arr_images","hits","max","image_id","floor","image_obj","image_URL","webformatURL","splittedImage","Game","data","error","categories","categoryChoosen","choosenCategoryId","fetchData","trivia_categories","chooseCategory","categoryClicked","getImages","img_url","card","JSON","stringify","Header","href","App","basename","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c83dd531.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/question.4a58233b.png\";","import React from 'react';\r\nimport logo from './../../logo.svg';\r\nimport './Home.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <NavLink to=\"/game\">Start</NavLink>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './QuestionCard.css';\r\nimport Button from \"../Button/Button.js\";\r\n\r\n\r\nconst getRandom = function (max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n};\r\nlet currentQuestion = 0;\r\nlet questions;\r\n\r\nclass QuestionCard extends React.Component {\r\n    state = {\r\n        difficultyChoosen: false,  //CHANGE ON FALSE\r\n        difficultyID: null,\r\n        question: null,\r\n        correctAnswer: null,\r\n        answer: null,\r\n        buttons: [],\r\n        currentQuestion: 0,\r\n        gameOver: false,\r\n        questions: [],\r\n    };\r\n\r\n\r\n    chooseDifficulty = async (id, color, name) => {\r\n        await this.setState({difficultyChoosen: true});\r\n        await this.setState({difficultyID: id});\r\n        await this.setState({difficultyColor: color});\r\n        await this.setState({difficultyText: name});\r\n        console.log(\"Choosen difficulty:\" + this.state.difficultyID);\r\n        this.getQuestions(this.props.choosenCategoryID, this.state.difficultyText);\r\n    };\r\n    getQuestions = async function (category, difficulty) {\r\n\r\n        let questionsAmount = 0;\r\n        let difficultyName = difficulty.toLowerCase();\r\n        const questionsAmount_URL = `https://opentdb.com/api_count.php?category=${category}`;\r\n        let questionsAmount_response = await fetch(questionsAmount_URL);\r\n        let questionsAmount_json = await questionsAmount_response.json();\r\n        let maxQuestionsAmount = questionsAmount_json.category_question_count[\"total_\" + difficultyName + \"_question_count\"];\r\n        questionsAmount = 20 > maxQuestionsAmount ? maxQuestionsAmount : 20;\r\n        console.log(\"questionsAmount\" + questionsAmount);\r\n\r\n        const questions_URL = `https://opentdb.com/api.php?amount=${maxQuestionsAmount}&category=${category}&difficulty=${difficultyName}`;\r\n        let allQuestions_response = await fetch(questions_URL);\r\n        let allQuestions_json = await allQuestions_response.json();\r\n        questions = allQuestions_json.results;\r\n        this.setState({questions});\r\n        this.setQuestion();\r\n\r\n    };\r\n    setQuestion = () => {\r\n        this.setState({question: this.state.questions[this.state.currentQuestion].question});\r\n        this.setState({correctAnswer: this.state.questions[this.state.currentQuestion].correct_answer});\r\n        this.setState({incorrectAnswers: this.state.questions[this.state.currentQuestion].incorrect_answers});\r\n        this.setButtons();\r\n    };\r\n    setButtons = function () {\r\n        let buttons = [];\r\n        this.setState({buttons:null})\r\n        for (let i = 0; i < this.state.incorrectAnswers.length; i++) {\r\n            let button = <Button\r\n                name={this.state.incorrectAnswers[i]}\r\n                color={\"red\"}\r\n                key={i + 1}\r\n                click={this.checkAnswer}\r\n                vision={false}\r\n            />;\r\n            buttons.push(button);\r\n        }\r\n        let button = <Button\r\n            name={this.state.correctAnswer}\r\n            color={\"green\"}\r\n            key={0}\r\n            click={this.checkAnswer}\r\n            vision={false}\r\n        />;\r\n        buttons.push(button);\r\n        buttons = buttons.sort(function () {\r\n            return Math.random() - 0.5;\r\n        });\r\n        this.setState({buttons:buttons});\r\n        console.log(this.state.buttons)\r\n    }\r\n\r\n\r\n    checkAnswer = async (id, color, answer) => {\r\n        currentQuestion = await currentQuestion + 1;\r\n        this.setState({currentQuestion});\r\n        if (this.state.currentQuestion > this.state.questions.length) { //проверка: закончились ли вопросы ?\r\n            this.setState({gameOver: true});\r\n            console.log('gameover');\r\n        }\r\n        if (answer == this.state.correctAnswer) {\r\n            console.log('question ' + currentQuestion + ' is correct');\r\n            this.setState({question: 'CORRECT'});\r\n        } else {\r\n            console.log('wrong' + this.state.correctAnswer + \"!=\" + answer);\r\n            this.setState({question: 'WRONG'});\r\n        }\r\n\r\n        setTimeout(this.setQuestion, 3000);\r\n\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        if (this.state.difficultyChoosen) {\r\n            return (\r\n                <div className=\"gameContainer\">\r\n                    <div className=\"statsContainer\">\r\n                        <p>Choosen category: {this.props.choosenCategoryID}, {this.props.categoryName}</p>\r\n                        <p color={this.state.difficultyColor}>Choosen difficulty: {this.state.difficultyText}</p>\r\n                    </div>\r\n                    <div className=\"statsContainer statsContainerRight\">\r\n\r\n                    </div>\r\n                    <div className=\"questionContainer\">\r\n                        <h2 className=\"question\">{this.state.question} </h2>\r\n                        <div className=\"buttons_container\">{this.state.buttons} </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <h2 className=\"question\">Please choose difficulty of Questions:</h2>\r\n                <div className=\"buttons_container\">\r\n                    <Button vision={true} name=\"Easy\" color=\"green\" id=\"1\" click={this.chooseDifficulty}/>\r\n                    <Button vision={true} name=\"Medium\" color=\"orange\" id=\"2\" click={this.chooseDifficulty}/>\r\n                    <Button vision={true} name=\"Hard\" color=\"red\" id=\"3\" click={this.chooseDifficulty}/>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionCard;","import React from 'react';\r\nimport './Button.css';\r\n\r\n\r\nclass Button extends React.Component {\r\n    state = {\r\n        className: null,\r\n    };\r\n\r\n\r\n    async componentDidMount() {\r\n        this.setState({vision: this.props.vision})\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className={this.state.vision ? \"button_\" + this.props.color : \"button\"}\r\n                        onClick={\r\n                            () => {\r\n                                this.setState({vision: true});\r\n                                this.props.click(this.props.id, this.props.color, this.props.name);\r\n                                console.log(\"click\");\r\n                            }\r\n\r\n                        }>\r\n                    {this.props.name}\r\n                </button>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\n\r\nexport default Button;","import React from 'react';\r\nimport './CategoryItem.css';\r\nimport question_logo from '../Resources/question.png';\r\nimport Button from \"../Button/Button.js\";\r\n\r\n\r\nclass CategoryItem extends React.Component {\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className =\"card-container\">\r\n                <div className=\"img-container\">\r\n                    <img className = \"card-image\" src={this.props.img_URL} />\r\n                </div>\r\n\r\n                    <Button className =\"card-button\"\r\n                            name={this.props.text}\r\n                            color=\"dark\"\r\n                            vision={true}\r\n                            click={() => { this.props.click(this.props.id,this.props.color, this.props.text)}}>\r\n                    </Button>\r\n            </div> )\r\n\r\n\r\n      };\r\n\r\n\r\n  }\r\n\r\n\r\nexport default CategoryItem;\r\n","import React from 'react';\r\nimport CategoryItem from \"../CategoryItem/CategoryItem.js\";\r\nimport QuestionCard from \"../QuestionCard/QuestionCard.js\";\r\nimport './Game.css'\r\n\r\n\r\nconst getRandom = function (max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n};\r\n\r\n\r\nlet cards = [];\r\nlet alreadyMount = false;\r\nconst getImage = async (searchTerm) => {\r\n    searchTerm = searchTerm.split(' ').join('+').split(':').join('');\r\n    searchTerm = searchTerm.replace('Entertainment', '');\r\n    searchTerm = searchTerm.replace('General', '');\r\n    searchTerm = searchTerm.replace('&', '');\r\n    searchTerm = searchTerm.replace('Science', '');\r\n    searchTerm = searchTerm.replace('Manga', '');\r\n\r\n    let images_URL = `https://pixabay.com/api/?key=15140358-a7c7469e9f7b84415745cbb2c&q=${searchTerm}&image_type=photo`;\r\n    let response = await fetch(images_URL);\r\n    let obj_images;\r\n    if (response.ok) {\r\n        obj_images = await response.json();\r\n    } else {\r\n        alert(\"Ошибка HTTP: \" + response.status);\r\n    }\r\n    let arr_images = obj_images.hits;\r\n    let image_id = getRandom(arr_images.length);\r\n    let image_obj = arr_images[image_id];\r\n    let image_URL = image_obj.webformatURL;\r\n    let splittedImage = image_URL.split('_');\r\n    splittedImage[1] = \"180.jpg\";\r\n    image_URL = splittedImage.join('_');\r\n    return image_URL;\r\n};\r\n\r\n\r\nclass Game extends React.Component {\r\n    state = {\r\n        data: {},\r\n        error: null,\r\n        categories: [],\r\n        cards: [],\r\n        categoryChoosen: false, // CHANGE THIS\r\n        categoryName: null,   // CHANGE THIS TO NULL\r\n        choosenCategoryId: null,// CHANGE THIS TO NULL\r\n    };\r\n\r\n    fetchData = async () => {\r\n        let categories_URL = 'https://opentdb.com/api_category.php';\r\n        let response = await fetch(categories_URL);\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            const categories = data.trivia_categories;\r\n            this.setState({categories});\r\n        } else {\r\n\r\n            this.setState({\r\n                error: \"Ошибка HTTP: \" + response.status\r\n            });\r\n        }\r\n    };\r\n    chooseCategory = async (categoryClicked, categoryName) => {\r\n        await this.setState({categoryChoosen: true});\r\n        await this.setState({categoryName: categoryName});\r\n        await this.setState({choosenCategoryId: categoryClicked});\r\n        console.log(this.state.categoryName + '   ' + this.state.choosenCategoryId + '  categoryChoosen:' + this.state.categoryChoosen)\r\n    };\r\n\r\n    getImages = async ()=> {\r\n        for (let i=0;i<this.state.categories.length; i++){\r\n            let img_url = await getImage(this.state.categories[i].name);\r\n            let card = <CategoryItem\r\n                text={this.state.categories[i].name}\r\n                id={this.state.categories[i].id}\r\n                img_URL={img_url}\r\n                key={this.state.categories[i].id}\r\n                click={this.chooseCategory}/>;\r\n            cards.push(card);\r\n        }\r\n\r\n        this.setState({cards});\r\n    };\r\n\r\n\r\n    async componentDidMount() {\r\n        if (alreadyMount === false) {\r\n            console.log(alreadyMount);\r\n            await this.fetchData();\r\n            await this.getImages();\r\n            alreadyMount = true;\r\n            console.log(alreadyMount);\r\n        } else {\r\n            this.setState({cards});\r\n        }\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (<div>\r\n                    <p>Error: {JSON.stringify(this.state.error, null, 2)}</p>\r\n                    <CategoryItem text='some another text'/>\r\n                </div>\r\n            )\r\n\r\n        }\r\n\r\n        if (this.state.categoryChoosen) {\r\n            return (\r\n                <div className=\"gameContainer\">\r\n                    <QuestionCard choosenCategoryID={this.state.choosenCategoryId}\r\n                                  categoryName={this.state.categoryName}/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"gameContainer\">\r\n                <h1 className=\"title\">Hello! Choose category of questions.</h1>\r\n                <div className=\"gameContainer\">\r\n                    <div className=\"cardsContainer\">\r\n                        {this.state.cards}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport Button from \"../Button/Button.js\";\r\n\r\n\r\nclass Header extends React.Component {\r\n    state = {\r\n        className: null,\r\n    };\r\n\r\n\r\n    async componentDidMount() {\r\n        this.setState({vision: this.props.vision})\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h1 id=\"sitename\">Soltivka.ho.ua</h1>\r\n                <div className=\"header-buttons\">\r\n                    <a className=\"header_button\" href={\"../../../index.html\"}>Home</a>\r\n                    <a className=\"header_button\">Personal projects</a>\r\n                    <a className=\"header_button\">My works</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\nimport {Switch, Route, HashRouter as Router} from \"react-router-dom\";\r\nimport Home from \"./components/Home/Home\";\r\nimport Game from \"./components/Game/Game\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Router basename={\"/\"}>\r\n            <div className=\"app\">\r\n                <Header>Header</Header>\r\n                <Switch>\r\n                    <Route path=\"/game\" component={Game}/>\r\n                    <Route path='*' exact={true} component={Home}/>\r\n                </Switch>\r\n                <footer>Footer</footer>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}